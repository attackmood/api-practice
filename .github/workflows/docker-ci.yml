name: 🚀 Deploy Spring Boot App

on:
  push:
    branches:
      - master  # ✅ master 브랜치에 코드가 푸시되면 실행
permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # 💻 GitHub Actions 실행 환경

    steps:
      # 📌 1️⃣ 리포지토리 코드 체크아웃
      - name: 📥 Checkout repository
        uses: actions/checkout@v3

      # 📌 2️⃣ JDK 17 설치
      - name: ⚙️ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          check-latest: true


      # 📌 3️⃣ Gradle 캐싱 (빌드 속도 최적화)
      - name: 💾 Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 📌 4️⃣ Gradle 빌드드
      - name: 🏗️ Build with Gradle
        run: gradle clean bootJar --no-daemon

      # 📌 5️⃣ GitHub Container Registry 로그인 
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}


      # 4) Docker 이미지 빌드
      - name: Build Docker Image
        run: |
          docker build \
            -t ghcr.io/${{ github.repository_owner }}/my-app:latest .

      - name: Push Docker Image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/my-app:latest

      # 6) 원격 서버로 SSH 접속 -> docker-compose pull, up -d
      # - name: Deploy to Server
      #   uses: appleboy/ssh-action@v0.1.16
      #   with:
      #     host: ${{ secrets.REMOTE_HOST }}
      #     username: ${{ secrets.REMOTE_USER }}
      #     key: ${{ secrets.SSH_KEY }}
      #     script: |
      #       cd /home/ubuntu/my-deploy-dir  # docker-compose.yml이 있는 폴더
      #       docker-compose pull app
      #       docker-compose up -d app
