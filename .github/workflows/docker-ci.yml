name: 🚀 Deploy Spring Boot App

on:
  push:
    branches:
      - master  # ✅ master 브랜치에 코드가 푸시되면 실행
permissions:
  contents: read
  
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # 💻 GitHub Actions 실행 환경

    steps:
      # 📌 1️⃣ 코드 체크아웃
      - name: 📥 Checkout repository
        uses: actions/checkout@v3
      # 📌 4️⃣ JDK 버전 확인
      - name: 🧐 Verify Java Version
        run: java -version

      # 📌 2️⃣ 기존 JDK 제거
      - name: 🗑️ Remove default JDK (if any)
        run: sudo apt-get remove -y java-common default-jdk

      # 📌 3️⃣ JDK 17 설치
      - name: ⚙️ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          check-latest: true


      # 📌 3️⃣ Gradle 캐싱 (빌드 속도 최적화)
      - name: 💾 Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

     # 📌 4️⃣ 환경별 application.yml 파일 생성
      - name: 📝 Generate application.yml files
        run: |
          # resources 폴더 생성
          mkdir -p ./src/main/resources
          
          # 기본 application.yml 생성 (main, develop 공통)
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "${{ secrets.YML }}" > ./src/main/resources/application.yml
          fi

          # 개발 환경 (develop 브랜치)
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "${{ secrets.YML_DEV }}" > ./src/main/resources/application-dev.yml
          fi

          # 운영 환경 (main 브랜치)
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "${{ secrets.YML_PROD }}" > ./src/main/resources/application-prod.yml
          fi
        shell: bash

      # 📌 5️⃣ Gradle 빌드 실행 (JAR 생성)
      - name: 🏗️ Build with Gradle
        run: gradle clean bootJar --no-daemon

      # 📌 6️⃣ Docker 이미지 빌드 & Docker Hub에 푸시
      - name: 🐳 Build and Push Docker Image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker build --build-arg JAR_FILE=build/libs/demo.jar -t ${{ secrets.DOCKER_USERNAME }}/my-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/my-app:latest

      # 📌 7️⃣ 로컬 서버에 배포
      - name: 🚀 Deploy to Local Server
        run: |
          # 최신 Docker 이미지 Pull
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-app:latest
      
          # 기존 컨테이너 정리
          docker stop my-app || true
          docker rm my-app || true
      
          # 새로운 컨테이너 실행
          docker run -d --name my-app -p 8081:8081 --network my-network \
            --restart always ${{ secrets.DOCKER_USERNAME }}/my-app:latest
      
          # 불필요한 이미지 삭제 (디스크 공간 절약)
          docker image prune -f


